#ifndef PARTICLESYSTEM_H
#define PARTICLESYSTEM_H

#include "Shaders.h"
#include "ResourceHandler.h"
#include "Camera.h"

enum ParticleType { EMITTER, PARTICLE};

class ParticleSystem
{
private:
    // Device
    ID3D11Device* m_device;
    ID3D11DeviceContext* m_deviceContext;

    bool m_disposed;

    // Maximum number of particles that can be created
    int m_maxParticles;

    // on the first run, we need to use a different vertex buffer to initialize the system
    bool m_firstRun;

    // How long the system has existed
    float m_age;

    // Constant Buffer
    PARTICLE_CBUFFER m_particleData;
    Buffer<PARTICLE_CBUFFER> m_particleCBuffer;
    PARTICLE_STYLE m_particleStyleData;
    Buffer<PARTICLE_STYLE> m_particleStyleCBuffer;

    // Shaders
    Shaders m_drawShaders;
    Shaders m_streamOutputShaders;

    // Vertex Buffers
    // A vertex buffer containing the original emitter particles
    Buffer<VertexParticle> m_initVertexBuffer;
    // vertex buffer to hold the particles to be drawn
    Buffer<VertexParticle> m_drawVertexBuffer;
    // vertex buffer to receive the particles generated by the stream-out shader
    Buffer<VertexParticle> m_streamOutVertexBuffer;

    // Textures
    ID3D11ShaderResourceView* m_texture1SRV;
    ID3D11ShaderResourceView* m_randomTexSRV;
    ID3D11ShaderResourceView* m_noiseTexSRV;

public:
    ParticleSystem();

    // Initialization
    void Initialize(ID3D11Device* device, ID3D11DeviceContext* deviceContext, std::wstring texArrayPath, int maxParticles, PARTICLE_STYLE styleData = PARTICLE_STYLE());

    // Getters
    float getAge() const { return m_age; }

    // Setters
    void setAge(float newAge) { m_age = newAge; }
    void setEmitPosition(XMFLOAT3 newPosition);

    // Update
    void reset();
    void updateShaders();
    void update(double dt, float gameTime, Camera &camera);

    // Render
    void generateParticles();
    void renderParticles();
};

#endif // !PARTICLESYSTEM_H